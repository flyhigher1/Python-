字典就是一组map，由key和value组成，能够快速查询value值，但是内存占用大，属于由空间换时间

d={'tom':23,'jim':25,'jack':21}

d['tom'] 可以打印出23
d['tom']=25 可以对指定的key进行赋值，如果是多次赋值，则旧的会被新的覆盖

d['jerry'] 会返回错误，因为没有指定的key

in 可以对字典内的key进行判断，例如 ‘jerry’ in d 会返回false
也可以用get函数进行判断，例如d.get(‘jerry’)会返回空，如果使用d.get('jerry'，-1) 则找不到指定key时会返回指定的值-1
pop函数可以删除指定的key和value，例如d.pop(‘tom’)


请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

和list比较，dict有以下几个特点：

查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。
而list相反：

查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。

dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。

要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key


***************************************************

set与字典类似，但是只包含key，不存储value。
由于key不能重复，所以可以通过set实现数学意义上的交集和并集
s1=set([1,2,3])
s2=set([2,3,4])
s1 & s2 = {2,3}
s1 | s2 = {1,2,3,4}

s=set([1,2,3])
s.add(4)
print(s)  ------{1,2,3,4}
s.remove(3)
print(s)  ------{1,2,4}

